// Generated by CoffeeScript 1.10.0
(function() {
  var COL_JSON, COL_JSON_NESTED, COL_XLSX, ROW_JSON, ROW_XLSX, chai, expect, fs, processFile;

  processFile = require('../lib/excel-as-json').processFile;

  fs = require('fs');

  chai = require('chai');

  chai.should();

  expect = chai.expect;

  ROW_XLSX = 'data/row-oriented.xlsx';

  ROW_JSON = 'build/row-oriented.json';

  COL_XLSX = 'data/col-oriented.xlsx';

  COL_JSON = 'build/col-oriented.json';

  COL_JSON_NESTED = 'build/newDir/col-oriented.json';

  describe('process file', function() {
    it('should notify on file does not exist', function(done) {
      return processFile('data/doesNotExist.xlsx', null, false, function(err, data) {
        err.should.be.a('string');
        expect(data).to.be.an('undefined');
        return done();
      });
    });
    it('should not blow up when a file does not exist and no callback is provided', function(done) {
      processFile('data/doesNotExist.xlsx', function() {});
      return done();
    });
    it('should notify on read error', function(done) {
      return processFile('data/row-oriented.csv', null, false, function(err, data) {
        err.should.be.a('string');
        expect(data).to.be.an('undefined');
        return done();
      });
    });
    it('should not blow up on read error when no callback is provided', function(done) {
      processFile('data/row-oriented.csv', function() {});
      return done();
    });
    it('should process row oriented Excel files, write the result, and return the parsed object', function(done) {
      return processFile(ROW_XLSX, ROW_JSON, false, function(err, data) {
        var result, resultStr;
        expect(err).to.be.an('undefined');
        result = JSON.parse(fs.readFileSync(ROW_JSON, 'utf8'));
        resultStr = '[{"firstName":"Jihad","lastName":"Saladin","address":{"street":"12 Beaver Court","city":"Snowmass","state":"CO","zip":81615}},{"firstName":"Marcus","lastName":"Rivapoli","address":{"street":"16 Vail Rd","city":"Vail","state":"CO","zip":81657}}]';
        JSON.stringify(result).should.equal(resultStr);
        JSON.stringify(data).should.equal(resultStr);
        return done();
      });
    });
    it('should process col oriented Excel files, write the result, and return the parsed object', function(done) {
      return processFile(COL_XLSX, COL_JSON, true, function(err, data) {
        var result, resultStr;
        expect(err).to.be.an('undefined');
        result = JSON.parse(fs.readFileSync(COL_JSON, 'utf8'));
        resultStr = '[{"firstName":"Jihad","lastName":"Saladin","address":{"street":"12 Beaver Court","city":"Snowmass","state":"CO","zip":81615},"isEmployee":true,"phones":[{"type":"home","number":"123.456.7890"},{"type":"work","number":"098.765.4321"}],"aliases":["stormagedden","bob"]},{"firstName":"Marcus","lastName":"Rivapoli","address":{"street":"16 Vail Rd","city":"Vail","state":"CO","zip":81657},"isEmployee":false,"phones":[{"type":"home","number":"123.456.7891"},{"type":"work","number":"098.765.4322"}],"aliases":["mac","markie"]}]';
        JSON.stringify(result).should.equal(resultStr);
        JSON.stringify(data).should.equal(resultStr);
        return done();
      });
    });
    it('should create the destination directory if it does not exist', function(done) {
      return processFile(COL_XLSX, COL_JSON_NESTED, true, function(err, data) {
        var result, resultStr;
        expect(err).to.be.an('undefined');
        result = JSON.parse(fs.readFileSync(COL_JSON_NESTED, 'utf8'));
        resultStr = '[{"firstName":"Jihad","lastName":"Saladin","address":{"street":"12 Beaver Court","city":"Snowmass","state":"CO","zip":81615},"isEmployee":true,"phones":[{"type":"home","number":"123.456.7890"},{"type":"work","number":"098.765.4321"}],"aliases":["stormagedden","bob"]},{"firstName":"Marcus","lastName":"Rivapoli","address":{"street":"16 Vail Rd","city":"Vail","state":"CO","zip":81657},"isEmployee":false,"phones":[{"type":"home","number":"123.456.7891"},{"type":"work","number":"098.765.4322"}],"aliases":["mac","markie"]}]';
        JSON.stringify(result).should.equal(resultStr);
        JSON.stringify(data).should.equal(resultStr);
        return done();
      });
    });
    it('should return a parsed object without writing a file', function(done) {
      var error;
      try {
        fs.unlinkSync(ROW_JSON);
      } catch (error) {

      }
      return processFile(ROW_XLSX, void 0, false, function(err, data) {
        var resultStr;
        expect(err).to.be.an('undefined');
        fs.existsSync(ROW_JSON).should.equal(false);
        resultStr = '[{"firstName":"Jihad","lastName":"Saladin","address":{"street":"12 Beaver Court","city":"Snowmass","state":"CO","zip":81615}},{"firstName":"Marcus","lastName":"Rivapoli","address":{"street":"16 Vail Rd","city":"Vail","state":"CO","zip":81657}}]';
        JSON.stringify(data).should.equal(resultStr);
        return done();
      });
    });
    return it('should notify on write error', function(done) {
      return processFile(ROW_XLSX, 'build', false, function(err, data) {
        expect(err).to.be.an('string');
        return done();
      });
    });
  });

}).call(this);
