// Generated by CoffeeScript 1.10.0
(function() {
  var assign, chai, expect;

  assign = require('../lib/excel-as-json').assign;

  chai = require('chai');

  chai.should();

  expect = chai.expect;

  describe('assign', function() {
    it('should assign first level properties', function() {
      var subject;
      subject = {};
      assign(subject, 'foo', 'clyde');
      return subject.foo.should.equal('clyde');
    });
    it('should assign second level properties', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar', 'wombat');
      return subject.foo.bar.should.equal('wombat');
    });
    it('should assign third level properties', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar.bazz', 'honey badger');
      return subject.foo.bar.bazz.should.equal('honey badger');
    });
    it('should convert text to numbers', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar.bazz', '42');
      return subject.foo.bar.bazz.should.equal(42);
    });
    it('should convert text to booleans', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar.bazz', 'true');
      subject.foo.bar.bazz.should.equal(true);
      assign(subject, 'foo.bar.bazz', 'false');
      return subject.foo.bar.bazz.should.equal(false);
    });
    it('should overwrite existing values', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar.bazz', 'honey badger');
      subject.foo.bar.bazz.should.equal('honey badger');
      assign(subject, 'foo.bar.bazz', "don't care");
      return subject.foo.bar.bazz.should.equal("don't care");
    });
    it('should assign properties to objects in a list', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar[0].what', 'that');
      return subject.foo.bar[0].what.should.equal('that');
    });
    it('should assign properties to objects in a list with first entry out of order', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar[1].what', 'that');
      assign(subject, 'foo.bar[0].what', 'this');
      subject.foo.bar[0].what.should.equal('this');
      return subject.foo.bar[1].what.should.equal('that');
    });
    it('should assign properties to objects in a list with second entry out of order', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar[0].what', 'this');
      assign(subject, 'foo.bar[2].what', 'that');
      assign(subject, 'foo.bar[1].what', 'other');
      subject.foo.bar[0].what.should.equal('this');
      subject.foo.bar[2].what.should.equal('that');
      return subject.foo.bar[1].what.should.equal('other');
    });
    it('should split a semicolon delimited list for flat arrays', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar[]', 'peter;paul;mary');
      return subject.foo.bar.toString().should.equal(['peter', 'paul', 'mary'].toString());
    });
    it('should convert text in a semicolon delimited list to numbers', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar[]', 'peter;-43;mary');
      return subject.foo.bar.toString().should.equal(['peter', -43, 'mary'].toString());
    });
    it('should convert text in a semicolon delimited list to booleans', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar[]', 'peter;false;true');
      return subject.foo.bar.toString().should.equal(['peter', false, true].toString());
    });
    return it('should not split a semicolon list with a terminal indexed array', function() {
      var subject;
      subject = {};
      assign(subject, 'foo.bar[0]', 'peter;paul;mary');
      return subject.foo.bar.should.equal('peter;paul;mary');
    });
  });

}).call(this);
